{"version":3,"file":"component---src-pages-resume-js-8e996cc37b166c414a5d.js","mappings":"sJAuGA,UArGmBA,KACjB,MAAM,EAACC,EAAS,EAACC,IAAeC,EAAAA,EAAAA,UAAS,GACnCC,GAAWC,EAAAA,EAAAA,QAAO,IAsFxB,OAnFAC,EAAAA,EAAAA,YAAU,KACQC,WACd,GAAsB,oBAAXC,OAAwB,CACjC,MAAMC,QAAiB,0DACjBC,QAAoB,0DAE1BD,EAASE,oBAAoBC,UAAYF,EAErBD,EAASI,YAAY,eAC7BC,QAAQC,MACjBC,IACCC,QAAQC,IAAI,cACZ,MAAMC,EAAaH,EAAIf,SACvBC,EAAYiB,EAAW,IAExBC,IACCH,QAAQI,MAAMD,EAAO,GAG3B,GAGFE,EAAS,GACR,KAGHhB,EAAAA,EAAAA,YAAU,KACYC,WAClB,GAAIN,EAAW,EAAG,CAChB,MAAMQ,QAAiB,0DACjBC,QAAoB,0DAE1BD,EAASE,oBAAoBC,UAAYF,EAErBD,EAASI,YAAY,eAC7BC,QAAQC,MACjBC,IACC,IAAK,IAAIO,EAAa,EAAGA,GAActB,EAAUsB,IAC/CP,EAAIQ,QAAQD,GAAYR,MAAMU,IAC5BR,QAAQC,IAAI,QAAQK,YAGpB,MAAMG,EAAWD,EAAKE,YAAY,CAAEC,MAAO,IACrCA,EACiB,GAApBpB,OAAOqB,WAAoBH,EAASI,MACjCC,EAAiBN,EAAKE,YAAY,CAAEC,UAGpCI,EAAS5B,EAAS6B,QAAQV,EAAa,GAC7C,GAAIS,EAAQ,CACV,MAAME,EAAUF,EAAOG,WAAW,MAClCH,EAAOI,OAASL,EAAeK,OAC/BJ,EAAOF,MAAQC,EAAeD,MAG9B,MAAMO,EAAgB,CACpBC,cAAeJ,EACfR,SAAUK,GAEZN,EAAKc,OAAOF,GAAevB,QAAQC,MAAK,KACtCE,QAAQC,IAAI,QAAQK,aAAsB,GAE9C,IAEJ,IAEDH,IACCH,QAAQI,MAAMD,EAAO,GAG3B,GAGFoB,EAAa,GACZ,CAACvC,IAGAG,EAAS6B,QAAQQ,SAAWxC,GAAYA,EAAW,IACrDG,EAAS6B,QAAU,IAAIS,MAAMzC,GAC1B0C,KAAK,MACLC,KAAI,IAAMC,EAAAA,eAIbA,EAAAA,cAAA,WACGH,MAAMI,KAAK,CAAEL,OAAQxC,IAAY,CAAC8C,EAAGC,IACpCH,EAAAA,cAAA,UACEI,IAAKD,EACLE,IAAMC,GAAQ/C,EAAS6B,QAAQe,GAASG,EACxCC,MAAO,CAAEC,QAAS,QAASC,OAAQ,SAAUC,aAAc,YAG3D,C","sources":["webpack://shayne-s-gatsby-site/./src/pages/resume.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\n\nconst ResumePage = () => {\n  const [numPages, setNumPages] = useState(0);\n  const pageRefs = useRef([]);\n\n  // 第一个 useEffect：加载 PDF，获取总页数\n  useEffect(() => {\n    const loadPdf = async () => {\n      if (typeof window !== 'undefined') {\n        const pdfjsLib = await import('pdfjs-dist');\n        const pdfjsWorker = await import('pdfjs-dist/build/pdf.worker.entry');\n\n        pdfjsLib.GlobalWorkerOptions.workerSrc = pdfjsWorker;\n\n        const loadingTask = pdfjsLib.getDocument('/resume.pdf');\n        loadingTask.promise.then(\n          (pdf) => {\n            console.log('PDF loaded');\n            const totalPages = pdf.numPages;\n            setNumPages(totalPages);\n          },\n          (reason) => {\n            console.error(reason);\n          }\n        );\n      }\n    };\n\n    loadPdf();\n  }, []);\n\n  // 第二个 useEffect：当 numPages 更新后，渲染每一页\n  useEffect(() => {\n    const renderPages = async () => {\n      if (numPages > 0) {\n        const pdfjsLib = await import('pdfjs-dist');\n        const pdfjsWorker = await import('pdfjs-dist/build/pdf.worker.entry');\n\n        pdfjsLib.GlobalWorkerOptions.workerSrc = pdfjsWorker;\n\n        const loadingTask = pdfjsLib.getDocument('/resume.pdf');\n        loadingTask.promise.then(\n          (pdf) => {\n            for (let pageNumber = 1; pageNumber <= numPages; pageNumber++) {\n              pdf.getPage(pageNumber).then((page) => {\n                console.log(`Page ${pageNumber} loaded`);\n\n                // 获取容器宽度，计算缩放比例\n                const viewport = page.getViewport({ scale: 1 });\n                const scale =\n                  (window.innerWidth * 0.9) / viewport.width; // 调整为页面宽度的 90%\n                const scaledViewport = page.getViewport({ scale });\n\n                // 获取对应的 canvas 引用\n                const canvas = pageRefs.current[pageNumber - 1];\n                if (canvas) {\n                  const context = canvas.getContext('2d');\n                  canvas.height = scaledViewport.height;\n                  canvas.width = scaledViewport.width;\n\n                  // 渲染 PDF 页面到 canvas 上\n                  const renderContext = {\n                    canvasContext: context,\n                    viewport: scaledViewport,\n                  };\n                  page.render(renderContext).promise.then(() => {\n                    console.log(`Page ${pageNumber} rendered`);\n                  });\n                }\n              });\n            }\n          },\n          (reason) => {\n            console.error(reason);\n          }\n        );\n      }\n    };\n\n    renderPages();\n  }, [numPages]); // 当 numPages 更新时执行\n\n  // 初始化 pageRefs\n  if (pageRefs.current.length !== numPages && numPages > 0) {\n    pageRefs.current = new Array(numPages)\n      .fill(null)\n      .map(() => React.createRef());\n  }\n\n  return (\n    <div>\n      {Array.from({ length: numPages }, (_, index) => (\n        <canvas\n          key={index}\n          ref={(el) => (pageRefs.current[index] = el)}\n          style={{ display: 'block', margin: '0 auto', marginBottom: '20px' }}\n        ></canvas>\n      ))}\n    </div>\n  );\n};\n\nexport default ResumePage;\n"],"names":["ResumePage","numPages","setNumPages","useState","pageRefs","useRef","useEffect","async","window","pdfjsLib","pdfjsWorker","GlobalWorkerOptions","workerSrc","getDocument","promise","then","pdf","console","log","totalPages","reason","error","loadPdf","pageNumber","getPage","page","viewport","getViewport","scale","innerWidth","width","scaledViewport","canvas","current","context","getContext","height","renderContext","canvasContext","render","renderPages","length","Array","fill","map","React","from","_","index","key","ref","el","style","display","margin","marginBottom"],"sourceRoot":""}